<Page x:Class="Test.Views.ShellPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:behaviors="using:Test.Behaviors"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:helpers="using:Test.Helpers"
      xmlns:i="using:Microsoft.Xaml.Interactivity"
      xmlns:ic="using:Microsoft.Xaml.Interactions.Core"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:utControls="using:UWP.Toolkit.Controls"
      xmlns:views="using:Test.Views"
      xmlns:winui="using:Microsoft.UI.Xaml.Controls"
      winui:BackdropMaterial.ApplyToRootOrPageBackground="True"
      mc:Ignorable="d"
      >

    <!--<Page.Resources>
        <ResourceDictionary>
            <utConverters:PaneDisplayModeToVisibilityConverter x:Key="PaneDisplayModeToVisibilityConverter" />
        </ResourceDictionary>
    </Page.Resources>-->

    <i:Interaction.Behaviors>
        <ic:EventTriggerBehavior EventName="Loaded">
            <ic:InvokeCommandAction Command="{x:Bind ViewModel.LoadedCommand}" />
        </ic:EventTriggerBehavior>
    </i:Interaction.Behaviors>

    <utControls:TitleBar x:Name="MyTitleBar"
                         AppIconSource="/Assets/AppLogo.svg"
                         AppName="UWP Toolkit"
                         BackButtonCommand="{x:Bind ViewModel.CanBackCommand}"
                         IsBackButtonEnabled="{x:Bind ViewModel.IsBackEnabled, Mode=OneWay}"
                         IsBackButtonVisible="{x:Bind ViewModel.IsBackEnabled, Mode=OneWay}"
                         IsReleaseTagVisible="Visible"
                         ReleaseTag="Test"
                         Size="Tall"
                         >
        <utControls:TitleBar.PanelLeft>
            <TextBlock Text="PanelLeft" />
        </utControls:TitleBar.PanelLeft>
        <utControls:TitleBar.Search>
            <AutoSuggestBox MaxWidth="300" QueryIcon="Find" />
        </utControls:TitleBar.Search>
        <utControls:TitleBar.PanelRight>
            <TextBlock Text="PanelRight" />
        </utControls:TitleBar.PanelRight>
        <utControls:TitleBar.Body>
            <winui:NavigationView x:Name="navigationView" IsBackButtonVisible="Collapsed" IsSettingsVisible="True" SelectedItem="{x:Bind ViewModel.Selected, Mode=OneWay}">
                <!--    IsBackButtonVisible="Collapsed"    -->
                <!--    IsPaneToggleButtonVisible="False"    -->
                <winui:NavigationView.MenuItems>
                    <!--
                        TODO: Change the symbols for each item as appropriate for your app
                        More on Segoe UI Symbol icons: https://docs.microsoft.com/windows/uwp/style/segoe-ui-symbol-font
                        Or to use an IconElement instead of a Symbol see https://github.com/microsoft/TemplateStudio/blob/main/docs/UWP/projectTypes/navigationpane.md
                        Edit String/en-US/Resources.resw: Add a menu item title for each page
                    -->
                    <winui:NavigationViewItem x:Uid="Shell_Main" helpers:NavHelper.NavigateTo="views:MainPage" Icon="Document" />
                </winui:NavigationView.MenuItems>
                <i:Interaction.Behaviors>
                    <behaviors:NavigationViewHeaderBehavior DefaultHeader="{x:Bind ViewModel.Selected.Content, Mode=OneWay}">
                        <behaviors:NavigationViewHeaderBehavior.DefaultHeaderTemplate>
                            <DataTemplate>
                                <Grid>
                                    <TextBlock Margin="{StaticResource SmallLeftRightMargin}" Style="{ThemeResource TitleTextBlockStyle}" Text="{Binding}" />
                                </Grid>
                            </DataTemplate>
                        </behaviors:NavigationViewHeaderBehavior.DefaultHeaderTemplate>
                    </behaviors:NavigationViewHeaderBehavior>
                    <ic:EventTriggerBehavior EventName="ItemInvoked">
                        <ic:InvokeCommandAction Command="{x:Bind ViewModel.ItemInvokedCommand}" />
                    </ic:EventTriggerBehavior>
                </i:Interaction.Behaviors>
                <Grid>
                    <Frame x:Name="shellFrame" />
                </Grid>
            </winui:NavigationView>

        </utControls:TitleBar.Body>
    </utControls:TitleBar>

</Page>
